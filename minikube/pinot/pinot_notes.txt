##pinot setup commands for minikube
helm dependency update
kubectl create ns pinot-quickstart
##below command inside helm directory on pinot repo
helm install -n pinot-quickstart pinot ./pinot


##table config
## schema was created from the UI
##use this to open UI in browser
##kumararpita@kumararpita-OMEN-Laptop-15-en0xxx:c$ ./query-pinot-data.sh 

{
  "tableName": "test_sample_events",
  "tableType": "REALTIME",
  "tenants": {
  "broker": "DefaultTenant",
  "server": "DefaultTenant"
},
  "segmentsConfig": {
    "timeColumnName": "ts",
    "schemaName": "test_sample_events",
    "replicasPerPartition": "1"
  },
  "tableIndexConfig": {
    "loadMode": "MMAP"
    
  },
  "ingestionConfig": {
    "streamIngestionConfig": {
      "streamConfigMaps": [
        {
          "streamType": "kafka",
          "stream.kafka.topic.name": "my-topic1",
          "stream.kafka.broker.list": "my-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092",
          "stream.kafka.decoder.class.name": "org.apache.pinot.plugin.inputformat.json.JSONMessageDecoder"
        }
      ]
    }
  }
}

##running kafka commands form cli

kubectl -n pinot-quickstart run kafka-topic-create -ti \
  --image=quay.io/strimzi/kafka:0.47.0-kafka-3.9.0 \
  --rm=true \
  --restart=Never \
  --command -- \
  bin/kafka-topics.sh \
  --bootstrap-server my-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092 \
  --create \
  --topic my-topic1 \
  --partitions 3 \
  --replication-factor 1

  python3 samplegen.py | kubectl -n pinot-quickstart run kafka-producer-11 -i \
  --image=quay.io/strimzi/kafka:0.47.0-kafka-3.9.0 \
  --rm=true \
  --restart=Never \
  --command -- \
  bin/kafka-console-producer.sh \
  --broker-list my-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092 \
  --topic my-topic1


--schema

{
  "schemaName": "stock_ticks_1",
  "dimensionFieldSpecs": [
    { "name": "S", "dataType": "STRING" }
  ],
  "metricFieldSpecs": [
    { "name": "c", "dataType": "DOUBLE" },
    { "name": "h", "dataType": "DOUBLE" },
    { "name": "l", "dataType": "DOUBLE" },
    { "name": "n", "dataType": "LONG" },
    { "name": "o", "dataType": "DOUBLE" },
    { "name": "v", "dataType": "LONG" },
    { "name": "vw", "dataType": "DOUBLE" }
  ],
  "dateTimeFieldSpecs": [
    {
      "name": "t",
      "dataType": "TIMESTAMP",
      "format": "1:MILLISECONDS:EPOCH",
      "granularity": "1:MILLISECONDS"
    }
  ]
}

{
    "tableName": "stock_ticks_1_fscREALTIME",
    "tableType": "REALTIME",
    "segmentsConfig": {
      "replicasPerPartition": "1",
      "timeColumnName": "t",
      "minimizeDataMovement": false
    },
    "tenants": {
      "broker": "DefaultTenant",
      "server": "DefaultTenant"
    },
    "tableIndexConfig": {
      "aggregateMetrics": false,
      "enableDefaultStarTree": false,
      "nullHandlingEnabled": false,
      "rangeIndexVersion": 2,
      "autoGeneratedInvertedIndex": false,
      "createInvertedIndexDuringSegmentGeneration": false,
      "loadMode": "MMAP",
      "enableDynamicStarTreeCreation": false,
      "columnMajorSegmentBuilderEnabled": true,
      "skipSegmentPreprocess": false,
      "optimizeDictionary": false,
      "optimizeDictionaryForMetrics": false,
      "optimizeDictionaryType": false,
      "noDictionarySizeRatioThreshold": 0.85
    },
    "metadata": {
      "customConfigs": {}
    },
    "ingestionConfig": {
      "streamIngestionConfig": {
        "streamConfigMaps": [
          {
            "streamType": "kafka",
            "stream.kafka.topic.name": "iex-topic-1-flattened",
            "stream.kafka.broker.list": "my-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092",
            "stream.kafka.consumer.type": "lowlevel",
            "stream.kafka.decoder.class.name": "org.apache.pinot.plugin.inputformat.json.JSONMessageDecoder",
            "stream.kafka.consumer.factory.class.name": "org.apache.pinot.plugin.stream.kafka20.KafkaConsumerFactory"
          }
        ],
        "pauselessConsumptionEnabled": false,
        "columnMajorSegmentBuilderEnabled": true,
        "trackFilteredMessageOffsets": false,
        "enforceConsumptionInOrder": false,
        "useIdealStateToCalculatePreviousSegment": false,
        "disasterRecoveryMode": "DEFAULT"
      },
      "transformConfigs": [],
      "continueOnError": false,
      "retryOnSegmentBuildPrecheckFailure": false,
      "rowTimeValueCheck": false,
      "segmentTimeValueCheck": true
    },
    "isDimTable": false
  }
